[
  {
    "objectID": "notebooks/2-data-eda.html",
    "href": "notebooks/2-data-eda.html",
    "title": "",
    "section": "",
    "text": "from pathlib import Path\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\nprocessed_data_path = Path(\"../data/processed\")\nweather = pd.read_csv(processed_data_path / \"weather.csv\", parse_dates=[\"date\"])\nparks_data = pd.read_csv(processed_data_path / \"parks-data-long.csv\", parse_dates=[\"date\"])\ndf = (pd\n      .merge(parks_data, weather, on=\"date\")\n      .loc[lambda x: x['variable'] == 'revenue']\n      .rename(columns={'value':'revenue'})\n      .drop(columns=['variable'])\n      .assign(facility=lambda x: x['facility'].str.title(),\n              month=lambda x: x['date'].dt.month_name(),\n              weekday=lambda x: x['date'].dt.day_name(),\n              year=lambda x: x['date'].dt.year,\n      )\n)\n\ndf.head()\n\n\n\n\n\n\n\n\n\ndate\npark_name\nfacility\nrevenue\ntemp_f\nprecip_in\nmonth\nweekday\nyear\n\n\n\n\n2\n2022-06-01\nGroveland Oaks\nCampground\n108\n75\n0.42\nJune\nWednesday\n2022\n\n\n3\n2022-06-01\nAddison Oaks\nCampground\n80\n75\n0.42\nJune\nWednesday\n2022\n\n\n4\n2022-06-01\nSpringfield Oaks\nGolf\n1184\n75\n0.42\nJune\nWednesday\n2022\n\n\n5\n2022-06-01\nGlen Oaks\nGolf\n1248\n75\n0.42\nJune\nWednesday\n2022\n\n\n8\n2022-06-01\nRed Oaks\nWaterpark\n402\n75\n0.42\nJune\nWednesday\n2022\n\n\n\n\n\n\n\n\n\n\n# Get unique facilities and prepare subplots\nfacilities = df['facility'].unique()\nn_facilities = len(facilities)\nfig, axs = plt.subplots(n_facilities, 1, figsize=(5, 4 * n_facilities), dpi=125)\ncmap = plt.get_cmap('tab20')\n\n# Check if axs is iterable (needed if only one subplot)\nif n_facilities == 1:\n    axs = [axs]\n\n# Plotting revenue vs temperature\nfor i, facility_type in enumerate(facilities):\n    ax = axs[i]\n    color = cmap(i)\n    subset = df[df['facility'] == facility_type]\n    ax.scatter(subset['temp_f'], subset['revenue'],\n               edgecolor='black', linewidth=0.75, color=color)\n    ax.set_title(facility_type)\n    ax.set_xlabel('Temperature (°F)')\n    ax.set_ylabel('Revenue ($)')\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n\n# Improve overall layout\nfig.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nfig, axs = plt.subplots(1, 3, figsize=(9, 3), dpi=250, sharey=True)\n\nfor i, facility in enumerate(df['facility'].unique()):\n    ax = axs[i]\n    subset = df[df['facility'] == facility]\n    ax.hist(subset['revenue'], bins=20, edgecolor='black',\n               alpha=0.7, label=facility)\n    ax.set_title(facility,fontsize=8)\n    ax.spines[['right', 'top']].set_visible(False)\n    \nfig.text(0.07, 0.5, 'Frequency', va='center', rotation='vertical')\nfig.text(0.5, 0.001, 'Daily Revenue($)', ha='center', va='top')\nfig.suptitle('Revenue Distribution by Facility', fontsize=12)\nfig.subplots_adjust(top=0.75)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Create boxplot for revenue for each day of the week and create a subplot for each facility\nfig, axs = plt.subplots(n_facilities, 1, figsize=(5, 4 * n_facilities), dpi=125)\nfor i, facility in enumerate(facilities):\n    ax = axs[i]\n    sns.boxplot(data=df[df['facility'] == facility], x='weekday', y='revenue', ax=ax,)\n    ax.set_title(facility)\n    ax.set_xlabel('')\n    ax.set_ylabel('Revenue ($)')\n    ax.spines['right'].set_visible(False)\n    ax.spines['top'].set_visible(False)\n    ax.tick_params(axis='x', labelsize=8, labelrotation=45)\n    # rotate x-axis labels\n    \nfig.tight_layout()\nplt.show()"
  },
  {
    "objectID": "notebooks/3-weather-analysis.html",
    "href": "notebooks/3-weather-analysis.html",
    "title": "Weather Analysis",
    "section": "",
    "text": "Quick analysis of effects of precipitation and temperature on revenu for golf courses, waterparks, and campgrounds.\nOverall conclusion is that temperature and precipiation do have a statistically significant effect on revenue. However the models constructed have small R^2 values of 0.13 or less. Meaning that for all facilities our daily weather variables explain 13% or less of the variation in daily revenue. Estimated average effects of weather on daily revenue was much smaller for campgrounds than either golf courses or waterparks. This makes intuitive sense as campgrounds visitors are likely to be more committed to a multiday plan and less likely to cancel due to weather, whereas golf courses and waterparks are more likely to have visitors cancel their daily plans based on the weather.\nFurther analysis of this dataset would involve looking for lagged effects of weather on revenue to see if there is a stronger explanatory effect of previous days weather or even the moving average of previous days’ weather.\n\nfrom pathlib import Path\nimport pandas as pd\nimport numpy as np\nimport matplotlib as plt\nimport statsmodels.api as sm\nimport statsmodels.formula.api as smf\nfrom statsmodels.regression.linear_model import RegressionResultsWrapper\n\n\nprocessed_data_path = Path('../data/processed')\n\nparks_data = pd.read_csv(processed_data_path / 'parks-data-long.csv')\nweather = pd.read_csv(processed_data_path / 'weather.csv')\ndf = (pd\n      .merge(parks_data, weather, on='date', how='left')\n      .loc[lambda x: x['variable'] == 'revenue']\n      .rename(columns={'value':'revenue'})\n      .drop(columns=['variable'])\n      .assign(month=lambda x: pd.to_datetime(x['date']).dt.month,\n              year=lambda x: pd.to_datetime(x['date']).dt.year,\n              weekday=lambda x: pd.to_datetime(x['date']).dt.day_name(),\n      )\n)\n\ndf.head()\n\n\n\n\n\n\n\n\n\ndate\npark_name\nfacility\nrevenue\ntemp_f\nprecip_in\nmonth\nyear\nweekday\n\n\n\n\n2\n2022-06-01\nGroveland Oaks\ncampground\n108\n75\n0.42\n6\n2022\nWednesday\n\n\n3\n2022-06-01\nAddison Oaks\ncampground\n80\n75\n0.42\n6\n2022\nWednesday\n\n\n4\n2022-06-01\nSpringfield Oaks\ngolf\n1184\n75\n0.42\n6\n2022\nWednesday\n\n\n5\n2022-06-01\nGlen Oaks\ngolf\n1248\n75\n0.42\n6\n2022\nWednesday\n\n\n8\n2022-06-01\nRed Oaks\nwaterpark\n402\n75\n0.42\n6\n2022\nWednesday\n\n\n\n\n\n\n\n\n\ndef build_regression_model(df: pd.DataFrame, facility_type: str) -&gt; RegressionResultsWrapper:\n    # Convert month and weekday to categorical variables\n    df['month'] = df['month'].astype('category')\n    df['weekday'] = df['weekday'].astype('category')\n\n    subset = df[df['facility'] == facility_type]\n        \n        # Build the model using Patsy formulas to handle categorical variables\n    formula = 'revenue ~ temp_f + precip_in'\n    model = smf.ols(formula, data=subset).fit()\n    \n    return model\n\n\nGolf\n\ngolf_model = build_regression_model(df, 'golf')\nprint(\"Facility Type: Golf\")\nprint(golf_model.summary())\n\nFacility Type: Golf\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                revenue   R-squared:                       0.128\nModel:                            OLS   Adj. R-squared:                  0.125\nMethod:                 Least Squares   F-statistic:                     40.18\nDate:                Thu, 25 Apr 2024   Prob (F-statistic):           5.16e-17\nTime:                        00:13:48   Log-Likelihood:                -3811.4\nNo. Observations:                 552   AIC:                             7629.\nDf Residuals:                     549   BIC:                             7642.\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept    590.8467     89.471      6.604      0.000     415.099     766.594\ntemp_f         8.4185      1.200      7.014      0.000       6.061      10.776\nprecip_in   -430.7451     69.696     -6.180      0.000    -567.649    -293.841\n==============================================================================\nOmnibus:                        5.244   Durbin-Watson:                   1.918\nProb(Omnibus):                  0.073   Jarque-Bera (JB):                4.252\nSkew:                           0.118   Prob(JB):                        0.119\nKurtosis:                       2.640   Cond. No.                         652.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\nCampground\n\ncampground_model = build_regression_model(df, 'campground')\nprint(\"Facility Type: Campground\")\nprint(campground_model.summary())\n\nFacility Type: Campground\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                revenue   R-squared:                       0.118\nModel:                            OLS   Adj. R-squared:                  0.115\nMethod:                 Least Squares   F-statistic:                     36.88\nDate:                Thu, 25 Apr 2024   Prob (F-statistic):           9.41e-16\nTime:                        00:13:48   Log-Likelihood:                -2865.8\nNo. Observations:                 552   AIC:                             5738.\nDf Residuals:                     549   BIC:                             5750.\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     41.4988     16.132      2.572      0.010       9.811      73.186\ntemp_f         1.3867      0.216      6.408      0.000       0.962       1.812\nprecip_in    -78.6735     12.566     -6.261      0.000    -103.357     -53.990\n==============================================================================\nOmnibus:                       13.581   Durbin-Watson:                   2.099\nProb(Omnibus):                  0.001   Jarque-Bera (JB):               10.138\nSkew:                           0.227   Prob(JB):                      0.00629\nKurtosis:                       2.516   Cond. No.                         652.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\nWaterpark\n\nwaterpark_model = build_regression_model(df, 'waterpark')\nprint(\"Facility Type: Waterpark\")\nprint(waterpark_model.summary())\n\nFacility Type: Waterpark\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                revenue   R-squared:                       0.064\nModel:                            OLS   Adj. R-squared:                  0.060\nMethod:                 Least Squares   F-statistic:                     18.73\nDate:                Thu, 25 Apr 2024   Prob (F-statistic):           1.35e-08\nTime:                        00:13:49   Log-Likelihood:                -3973.9\nNo. Observations:                 552   AIC:                             7954.\nDf Residuals:                     549   BIC:                             7967.\nDf Model:                           2                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P&gt;|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept    401.2879    120.099      3.341      0.001     165.378     637.198\ntemp_f         7.9401      1.611      4.928      0.000       4.775      11.105\nprecip_in   -379.0144     93.555     -4.051      0.000    -562.784    -195.245\n==============================================================================\nOmnibus:                       21.869   Durbin-Watson:                   1.652\nProb(Omnibus):                  0.000   Jarque-Bera (JB):               23.848\nSkew:                           0.508   Prob(JB):                     6.63e-06\nKurtosis:                       2.926   Cond. No.                         652.\n==============================================================================\n\nNotes:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified."
  },
  {
    "objectID": "notebooks/1-data-cleaning.html",
    "href": "notebooks/1-data-cleaning.html",
    "title": "Data Cleaning",
    "section": "",
    "text": "Data was provided in a wide-format and needs to be converted to a tidy long-format. This will make it easier to work with in Tableau and programmatically with Python.\nI did find that repivotting the revenue and user/visitation variables in the long dataframe worked best for my needs in Tableau. parks-data-pivot.csv is this file and is what was used in Tableau. A dataframe of total monthly revenue and monthly percent change, was also created and used in Tableau for a basic KPI tracker.\n\nfrom pathlib import Path\n\nimport pandas as pd\nimport numpy as np\n\n\n# Create base paths to the data directories\nraw_data_path = Path('../data/raw')\nprocessed_data_path = Path('../data/processed')\n\n# Read in the provided parks data\ndf = pd.read_csv(raw_data_path / 'parks-data.csv')\ndf.head()\n\n\n\n\n\n\n\n\n\nDate\nSpringfield Oaks Golf Course Golf Rounds Played\nSpringfield Oaks Golf Course Golf Revenue\nGlen Oaks Golf Course Golf Rounds Played\nGlen Oaks Golf Course Golf Revenue\nRed Oaks Waterpark Visitors\nRed Oaks Waterpark Revenue\nWaterford Oaks Waterpark Visitors\nWaterford Oaks Waterpark Revenue\nGroveland Oaks Campers\nGroveland Oaks Campground Revenue\nAddison Oaks Campers\nAddison Oaks Campground Revenue\nTemperature (F)\nPrecipitation (inches)\n\n\n\n\n0\n6/1/2022\n37\n1184\n32\n1248\n134\n402\n213\n852\n9\n108\n10\n80\n75\n0.42\n\n\n1\n6/2/2022\n45\n1485\n42\n1344\n287\n1148\n329\n1316\n13\n169\n11\n110\n90\n0.07\n\n\n2\n6/3/2022\n22\n880\n26\n962\n170\n680\n178\n534\n11\n143\n5\n50\n82\n0.36\n\n\n3\n6/4/2022\n23\n782\n30\n1050\n105\n315\n164\n820\n8\n88\n10\n100\n77\n0.35\n\n\n4\n6/5/2022\n46\n1794\n43\n1376\n380\n1140\n289\n1156\n13\n169\n17\n204\n87\n0.14\n\n\n\n\n\n\n\n\n\n# Initial data cleaning\ndef tweak_df(df: pd.DataFrame) -&gt; pd.DataFrame:\n    return (df\n            .rename(columns={'Date':'date',\n                             'Springfield Oaks Golf Course Golf Rounds Played':'springfield_oaks_golf_rounds_played',\n                             'Springfield Oaks Golf Course Golf Revenue': 'springfield_oaks_golf_revenue',\n                             'Glen Oaks Golf Course Golf Rounds Played': 'glen_oaks_golf_rounds_played',\n                             'Glen Oaks Golf Course Golf Revenue': 'glen_oaks_golf_revenue',\n                             'Red Oaks Waterpark Visitors': 'red_oaks_waterpark_visitors',\n                             'Red Oaks Waterpark Revenue': 'red_oaks_waterpark_revenue',\n                             'Waterford Oaks Waterpark Visitors': 'waterford_oaks_waterpark_visitors',\n                             'Waterford Oaks Waterpark Revenue': 'waterford_oaks_waterpark_revenue',\n                             'Groveland Oaks Campers': 'groveland_oaks_campers',\n                             'Groveland Oaks Campground Revenue': 'groveland_oaks_campground_revenue',\n                             'Addison Oaks Campers': 'addison_oaks_campers',\n                             'Addison Oaks Campground Revenue': 'addison_oaks_campground_revenue',\n                             'Temperature (F)': 'temp_f',\n                             'Precipitation (inches)': 'precip_in',})\n            .assign(date=lambda x: pd.to_datetime(x['date'], format='%m/%d/%Y')\n            )\n    )\n      \ndf_tweaked = tweak_df(df)\ndf_tweaked.head()\n\n\n\n\n\n\n\n\n\ndate\nspringfield_oaks_golf_rounds_played\nspringfield_oaks_golf_revenue\nglen_oaks_golf_rounds_played\nglen_oaks_golf_revenue\nred_oaks_waterpark_visitors\nred_oaks_waterpark_revenue\nwaterford_oaks_waterpark_visitors\nwaterford_oaks_waterpark_revenue\ngroveland_oaks_campers\ngroveland_oaks_campground_revenue\naddison_oaks_campers\naddison_oaks_campground_revenue\ntemp_f\nprecip_in\n\n\n\n\n0\n2022-06-01\n37\n1184\n32\n1248\n134\n402\n213\n852\n9\n108\n10\n80\n75\n0.42\n\n\n1\n2022-06-02\n45\n1485\n42\n1344\n287\n1148\n329\n1316\n13\n169\n11\n110\n90\n0.07\n\n\n2\n2022-06-03\n22\n880\n26\n962\n170\n680\n178\n534\n11\n143\n5\n50\n82\n0.36\n\n\n3\n2022-06-04\n23\n782\n30\n1050\n105\n315\n164\n820\n8\n88\n10\n100\n77\n0.35\n\n\n4\n2022-06-05\n46\n1794\n43\n1376\n380\n1140\n289\n1156\n13\n169\n17\n204\n87\n0.14\n\n\n\n\n\n\n\n\n\ndef split_parks_and_weather_data(df: pd.DataFrame) -&gt; pd.DataFrame:\n    parks_data = df.drop(columns=['temp_f', 'precip_in'])\n    weather = df[['date', 'temp_f', 'precip_in']]\n    return parks_data, weather\n\nparks_data, weather = split_parks_and_weather_data(df_tweaked)\n\nparks_data.to_csv(processed_data_path / 'parks-data.csv', index=False)  \nweather.to_csv(processed_data_path / 'weather.csv', index=False)\nweather.head()\n\n\n\n\n\n\n\n\n\ndate\ntemp_f\nprecip_in\n\n\n\n\n0\n2022-06-01\n75\n0.42\n\n\n1\n2022-06-02\n90\n0.07\n\n\n2\n2022-06-03\n82\n0.36\n\n\n3\n2022-06-04\n77\n0.35\n\n\n4\n2022-06-05\n87\n0.14\n\n\n\n\n\n\n\n\n\n# Convert to long format\ndef parks_data_wide_to_long(df: pd.DataFrame) -&gt; pd.DataFrame:\n    return (df\n            .melt(id_vars='date', var_name='intermediate', value_name='value')\n            .assign(park_name=lambda df_: (df_['intermediate']\n                                   .str.split('_')\n                                   .str[0:2]\n                                   .str.join(' ').str.title()\n                                   ),\n                    facility=lambda df_: df_['intermediate'].apply(lambda v: ('golf' if 'golf' in v\n                                                                      else 'waterpark' if 'waterpark'in v\n                                                                      else 'campground'\n                                                                      )\n                                                           ),\n                    variable=lambda df_: df_['intermediate'].apply(lambda v: ('rounds played' if 'rounds' in v\n                                                                      else 'revenue' if 'revenue' in v\n                                                                      else 'visitors' if 'visitors' in v\n                                                                      else 'campers')\n                                                           )\n            )\n    .drop(columns=['intermediate'])\n    .sort_values(['date', 'facility', 'variable'])\n    .reset_index(drop=True)\n    .reindex(columns=['date', 'park_name', 'facility', 'variable', 'value'])\n    )  \n\nparks_data_long = parks_data_wide_to_long(parks_data)\nparks_data_long.to_csv(processed_data_path / 'parks-data-long.csv', index=False)\nparks_data_long.head()\n\n\n\n\n\n\n\n\n\ndate\npark_name\nfacility\nvariable\nvalue\n\n\n\n\n0\n2022-06-01\nGroveland Oaks\ncampground\ncampers\n9\n\n\n1\n2022-06-01\nAddison Oaks\ncampground\ncampers\n10\n\n\n2\n2022-06-01\nGroveland Oaks\ncampground\nrevenue\n108\n\n\n3\n2022-06-01\nAddison Oaks\ncampground\nrevenue\n80\n\n\n4\n2022-06-01\nSpringfield Oaks\ngolf\nrevenue\n1184\n\n\n\n\n\n\n\n\n\nparks_data_pivot = (parks_data_long\n                    .pivot(index=['date', 'park_name', 'facility'],\n                           columns='variable',\n                           values='value')\n                    .reset_index()\n)\n                    \nparks_data_pivot.to_csv(processed_data_path / 'parks-data-pivot.csv', index=False)\nparks_data_pivot.head()\n\n\n\n\n\n\n\n\nvariable\ndate\npark_name\nfacility\ncampers\nrevenue\nrounds played\nvisitors\n\n\n\n\n0\n2022-06-01\nAddison Oaks\ncampground\n10.0\n80.0\nNaN\nNaN\n\n\n1\n2022-06-01\nGlen Oaks\ngolf\nNaN\n1248.0\n32.0\nNaN\n\n\n2\n2022-06-01\nGroveland Oaks\ncampground\n9.0\n108.0\nNaN\nNaN\n\n\n3\n2022-06-01\nRed Oaks\nwaterpark\nNaN\n402.0\nNaN\n134.0\n\n\n4\n2022-06-01\nSpringfield Oaks\ngolf\nNaN\n1184.0\n37.0\nNaN\n\n\n\n\n\n\n\n\n\nparks_data_kpi = (\n    parks_data_long\n    .set_index('date')\n    .groupby(['park_name', 'facility', 'variable'])\n    .resample('ME')\n    .sum(numeric_only=True)\n    .loc[lambda x: x['value'] &gt; 0]\n    .reset_index()\n    .set_index('date')\n    .assign(pct_change= lambda x: np.round(x.groupby(['park_name', 'facility', 'variable'])['value'].pct_change()*100, 1))\n    .rename(columns={'value': 'total'})\n    .reset_index()\n)\n\nparks_data_kpi.to_csv(processed_data_path / 'parks_data_kpi.csv')\nparks_data_kpi.head()\n\n\n\n\n\n\n\n\n\ndate\npark_name\nfacility\nvariable\ntotal\npct_change\n\n\n\n\n0\n2022-06-30\nAddison Oaks\ncampground\ncampers\n329\nNaN\n\n\n1\n2022-07-31\nAddison Oaks\ncampground\ncampers\n376\n14.3\n\n\n2\n2022-08-31\nAddison Oaks\ncampground\ncampers\n308\n-18.1\n\n\n3\n2023-06-30\nAddison Oaks\ncampground\ncampers\n349\n13.3\n\n\n4\n2023-07-31\nAddison Oaks\ncampground\ncampers\n341\n-2.3"
  }
]